package com.example.employeeperformance.service;

import com.example.employeeperformance.model.Employee;
import com.example.employeeperformance.repository.EmployeeRepository;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class EmployeeService {
    private final EmployeeRepository repository;

    private static final Map<String, Double> STANDARD_DISTRIBUTION = Map.of("A", 10.0, "B", 20.0, "C", 40.0, "D", 20.0, "E", 10.0);

    public EmployeeService(EmployeeRepository repository) {
        this.repository = repository;
    }

    public List<Employee> getAllEmployees() {
        return repository.findAll();
    }

    public Optional<Employee> getEmployeeById(Long id) {
        return repository.findById(id);
    }

    public Employee addEmployee(Employee employee) {
        validateRating(employee.getRating());
        return repository.save(employee);
    }

    public Employee updateEmployee(Long id, Employee updatedEmployee) {
        return repository.findById(id).map(employee -> {
            if (updatedEmployee.getName() != null) {
                employee.setName(updatedEmployee.getName());
            }
            if (updatedEmployee.getDepartment() != null) {
                employee.setDepartment(updatedEmployee.getDepartment());
            }
            if (updatedEmployee.getRating() != null) {
                validateRating(updatedEmployee.getRating());
                employee.setRating(updatedEmployee.getRating());
            }
            return repository.save(employee);
        }).orElseThrow(() -> new RuntimeException("Employee with ID " + id + " not found"));
    }

    public void deleteEmployee(Long id) {
        if (!repository.existsById(id)) {
            throw new RuntimeException("Employee with ID " + id + " not found");
        }
        repository.deleteById(id);
    }

    private void validateRating(String rating) {
        if (rating == null || !STANDARD_DISTRIBUTION.containsKey(rating)) {
            throw new IllegalArgumentException("Invalid rating. Allowed values: " + STANDARD_DISTRIBUTION.keySet());
        }
    }

    public List<Map<String, Object>> getDetailedDistribution() {
        List<Employee> employees = repository.findAll();
        int totalEmployees = employees.size();

        if (totalEmployees == 0) {
            return Collections.emptyList();
        }

        Map<String, List<String>> ratingToNames = employees.stream()
                .filter(emp -> emp.getRating() != null)
                .collect(Collectors.groupingBy(Employee::getRating, Collectors.mapping(Employee::getName, Collectors.toList())));

        return ratingToNames.entrySet().stream()
                .map(entry -> Map.of(
                        "rating", entry.getKey(),
                        "percentage", (entry.getValue().size() * 100.0) / totalEmployees,
                        "names", entry.getValue()
                ))
                .collect(Collectors.toList());
    }
}

